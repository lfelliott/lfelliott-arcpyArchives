# ---------------------------------------------------------------------------
# perpendicular_transects.py
# Lee Elliott 6/4/2013
# Script to make perpendicular line segments from points generated by Geospatial Modelling Environment 
# sampleperppointsalonglines 
#
# Parameters requiring adjusting for specific application:
#   env.workspace - Location of files
#   outpts - Shapefile where points generated by sampleperppointsalonglines resides
#   lines - Feature class where generated line segments will reside
#   maxid - maximum number of points from SetID of point file above


import arcpy
from arcpy import env
from arcpy import management as DM

# Define workspace where files are stored
env.workspace = "d:\\gis\\gme"

# Define the feature class containing the point outputs from GME sampleperppointsalonglines
outpts = "outpts.shp"
# Name the shapefile where the output lines will be stored. This file will be generated. 
# If it exists already, it will be deleted
lines = "lines.shp"

pt_layer = "l_points"
DM.MakeFeatureLayer(outpts, pt_layer)

line_layer = "l_lines"

# Name the temporary shapefile that will hold each line before it's appended to the lines file above.
# This file will be generated. If it already exists it will be deleted.
temp = "temp.shp"

# Get the maximum SETID from the point file.
cur = arcpy.SearchCursor(outpts)
maxid = 0
for row in cur:
	if (row.SETID > maxid):
		maxid = row.SETID
print "Script will generate %d lines." % maxid
if arcpy.Exists(lines):
	DM.Delete(lines)
if arcpy.Exists(temp):
	DM.Delete(temp)
i = 1
while (i <= maxid):
	# Process: Select Layer By Attribute
	print i
	newstr = "\"SETID\" = %d" % i
	DM.SelectLayerByAttribute(pt_layer, "NEW_SELECTION", newstr)

	# Process: Points To Line
	DM.PointsToLine(pt_layer, temp, "SETID", "INSETID", "NO_CLOSE")
	
	if (i == 1):
		DM.CopyFeatures(temp, lines)
		DM.MakeFeatureLayer(lines, line_layer)
	else:
		DM.Append(temp, line_layer, "TEST", "", "")
	DM.DeleteFeatures(temp)
	i = i + 1

